name: ssh # 워크플로우 이름 설정

on:
  push:
    branches:
      - main # main 브랜치에 push 이벤트가 발생하면 실행

jobs:
  ssh-agent:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 저장소의 코드를 가져오는 액션 (필수)

      - name: Cache Docker Image Layer
        uses: actions/cache@v4.2.0 # Docker 이미지 레이어를 캐싱하여 빌드 속도 향상
        with:
          path: /tmp/.buildx-cache # 캐싱할 경로 설정
          key: docker-image-layer-cache # 캐시 키 설정

      - name: run ssh-agent
        uses: webfactory/ssh-agent@v0.9.0 # SSH 키를 사용하기 위한 SSH 에이전트 실행
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # GitHub Secrets에서 SSH 개인 키 가져옴

      - name: Add Host Server Fingerprint to Known Hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true
        # SSH 접속을 위해 원격 서버의 공개 키를 Known Hosts 파일에 추가 (보안 경고 방지)

      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
        # 환경 변수 파일(.env) 생성 및 GitHub Secrets에서 값 가져와 설정

      # # 권한 설정 추가
      # - name: Set Permissions for buildx cache
      #   run: sudo chmod -R 777 /tmp

      # docker buildKit 엔진 설정 action(라이브러리)
      - name: Set up Docker buildKit
        # setiup-buildx-action
        # - 워크스페이스에 buildKit 엔진을 설치하는 action(라이브러리)
        # buildx = buildKit
        uses: docker/setup-buildx-action@v3

      # BuildKit 엔진 빌더(이미지 빌드를 도와주는 도구)생성
      # 기존 Docker 빌더 : Cache 파일 저장&불러오기 경로 제어 불가
      - name: Create buildkit 빌더
        # 1. buildkit 빌더(buildkit)를 생성하는 명령어
        # 2. 빌더(buildkit) 설정 명령어
        run: |
          docker buildx create --use --name buildkit
          docker buildx use buildkit

      - name: Docker Image Build
        run: docker compose -f docker-compose-actions-cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1
        # Docker Compose를 사용해 애플리케이션 빌드

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
        # DockerHub 로그인 (GitHub Secrets에서 Docker 계정 정보 가져옴)

      - name: Docker Image Push
        run: docker compose -f docker-compose-actions-cache.yml push
        # 빌드된 Docker 이미지를 DockerHub에 푸시

      - name: Copy .env / docker-compose.yml
        uses: appleboy/scp-action@v0.1.7 # SCP(Secure Copy) 액션을 사용하여 파일을 원격 서버로 전송
        with:
          host: ${{ secrets.SSH_HOST }} # SSH 접속할 원격 서버 주소
          username: ${{ secrets.SSH_USERNAME }} # SSH 접속할 사용자 이름
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 개인 키
          port: ${{ secrets.SSH_PORT }} # SSH 포트
          source: "docker-compose-actions-cache.yml,.env" # 전송할 파일 목록
          target: "~/work-directory" # 원격 서버에서 파일을 저장할 위치

      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3 # SSH 액션을 사용하여 원격 서버에서 명령 실행
        with:
          host: ${{ secrets.SSH_HOST }} # 원격 서버 주소
          username: ${{ secrets.SSH_USERNAME }} # SSH 사용자 이름
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 개인 키
          port: ${{ secrets.SSH_PORT }} # SSH 포트

          # cd ~/work-directory  = 작업 디렉토리로 이동
          # docker compose pull  = 최신 Docker 이미지를 가져옴
          # docker compose up -d = 컨테이너를 백그라운드에서 실행 (배포 완료)
          script: |
            cd ~/work-directory   
            docker compose -f docker-compose-actions-cache.yml pull   
            docker compose -f docker-compose-actions-cache.yml down -v 
            docker compose -f docker-compose-actions-cache.yml up -d

      - name: Start Message - success
        if: success() # 성공 시 실행
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "배포 성공 !🎉"

      - name: Start Message - fail
        if: failure() # 실패 시 실행
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "배포 실패 ❌"
